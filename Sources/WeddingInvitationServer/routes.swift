// Sources/WeddingInvitationServer/routes.swift
@preconcurrency import Fluent
@preconcurrency import Vapor

// üèóÔ∏è API ÏùëÎãµÏùÑ ÏúÑÌïú Íµ¨Ï°∞Ï≤¥Îì§ (Ïù¥Î¶Ñ Î≥ÄÍ≤Ω)
struct InvitationAPIResponse: Content {
    let groupName: String
    let groupType: String
    let groomName: String
    let brideName: String
    let weddingDate: String
    let weddingLocation: String
    let greetingMessage: String
    let ceremonyProgram: String
    let accountInfo: [String]
    let features: InvitationFeatures
}

struct InvitationFeatures: Content {
    let showRsvpForm: Bool
    let showAccountInfo: Bool
    let showShareButton: Bool
    let showVenueInfo: Bool
    let showPhotoGallery: Bool
    let showCeremonyProgram: Bool
}

// ÎùºÏö∞Ìä∏ ÏÑ§Ï†ï Ìï®Ïàò
func routes(_ app: Application) throws {
    
    // ‚úÖ ÏàòÏ†ïÎêú setup-test-data ÎùºÏö∞Ìä∏
    app.get("setup-test-data") { req async throws -> String in
        // wedding123 Í∑∏Î£πÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
        let existingGroup = try await InvitationGroup.query(on: req.db)
            .filter(\.$uniqueCode == "wedding123")
            .first()
        
        if existingGroup == nil {
            // ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ± (greetingMessage Ï∂îÍ∞Ä)
            let testGroup = InvitationGroup()
            testGroup.groupName = "Í≤∞ÌòºÏãù Ï¥àÎåÄ Í∑∏Î£π"
            testGroup.groupType = GroupType.weddingGuest.rawValue
            testGroup.uniqueCode = "wedding123"
            testGroup.greetingMessage = "Ï†ÄÌù¨Ïùò ÏÜåÏ§ëÌïú ÎÇ†Ïóê Ìï®ÍªòÌï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§."  // ‚úÖ Ï∂îÍ∞Ä
            
            try await testGroup.save(on: req.db)
            return "‚úÖ wedding123 Í∑∏Î£πÏù¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!"
        } else {
            return "‚úÖ wedding123 Í∑∏Î£πÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§!"
        }
    }
    
    app.get("run-migrations") { req async throws -> String in
        try await app.autoMigrate()
        return "‚úÖ PostgreSQL ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
    }
    
    // Í∏∞Î≥∏ Î£®Ìä∏ - ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏Ïö©
    app.get { req async in
        return "Wedding Invitation Server is running! üíç"
    }
        
    // Hello ÌÖåÏä§Ìä∏ Í≤ΩÎ°ú
    app.get("hello") { req async in
        return "Hello, world!"
    }
    // ‚úÖ RsvpController Îì±Î°ù ÏïÑÎûòÏóê Ï∂îÍ∞Ä
    try app.register(collection: RsvpController())
    // AdminController Îì±Î°ù
    try app.register(collection: AdminController())
    // InvitationController Îì±Î°ù - ÎàÑÎùΩÎêú Î∂ÄÎ∂Ñ Ï∂îÍ∞Ä
    try app.register(collection: InvitationController())
    // routes.swift ÌååÏùºÏùò Îß® ÏïÑÎûòÏóê Îã§Ïùå Ï§ÑÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî
    try app.register(collection: WeddingController())
    
    
    // API Í∑∏Î£π ÏÉùÏÑ± (/api/...)
    let api = app.grouped("api")
    
    // WeddingInfo Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä
    app.get("create-wedding-data") { req async throws -> String in
        // Í∏∞Ï°¥ Í≤∞ÌòºÏãù Ï†ïÎ≥¥Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
        let existingWedding = try await WeddingInfo.query(on: req.db).first()
        
        if existingWedding == nil {
            // Í∏∞Î≥∏ Í≤∞ÌòºÏãù Ï†ïÎ≥¥ ÏÉùÏÑ±
            let weddingInfo = WeddingInfo()
            weddingInfo.groomName = "Ïù¥ÏßÄÌôò"
            weddingInfo.brideName = "Ïù¥Ïú§ÏßÑ"
            weddingInfo.weddingDate = Date()
            weddingInfo.venueName = "Ìè¨Ìè¨Ïù∏Ï∏† Î∞îÏù¥ ÏâêÎùºÌÜ§ Ï°∞ÏÑ† ÏÑúÏö∏Ïó≠"
            weddingInfo.venueAddress = "ÏÑúÏö∏ Ïö©ÏÇ∞Íµ¨ ÌïúÍ∞ïÎåÄÎ°ú 366 Ìè¨Ìè¨Ïù∏Ï∏†Î∞îÏù¥ÏâêÎùºÌÜ§Ï°∞ÏÑ† ÏÑúÏö∏Ïó≠"
            weddingInfo.venueDetail = "Ìè¨Ìè¨Ïù∏Ï∏† Î∞îÏù¥ ÏâêÎùºÌÜ§ Ï°∞ÏÑ† ÏÑúÏö∏Ïó≠ 19Ï∏µ"
            weddingInfo.greetingMessage = "Ï†ÄÌù¨ Îëê ÏÇ¨ÎûåÏùò ÏÉàÎ°úÏö¥ ÏãúÏûëÏùÑ Ï∂ïÎ≥µÌï¥Ï£ºÏÑ∏Ïöî."
            weddingInfo.ceremonyProgram = "Ïò§ÌõÑ 6Ïãú ÏòàÏãù"
            weddingInfo.accountInfo = ["ÎÜçÌòë 121065-56- 105215 (Í≥†Ïù∏Ïò• / Ïã†ÎûëÊØç)"]
            
            try await weddingInfo.save(on: req.db)
            return "‚úÖ Í∏∞Î≥∏ Í≤∞ÌòºÏãù Ï†ïÎ≥¥Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!"
        } else {
            return "‚úÖ Í≤∞ÌòºÏãù Ï†ïÎ≥¥Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§!"
        }
    }
    
    // 4. Î™®Îì† Í∑∏Î£π Ï°∞Ìöå API (Í¥ÄÎ¶¨ÏûêÏö©)
    // GET /api/groups
    api.get("groups") { req async throws -> Response in
        let jsonString = """
        [
            {
                "id": "1",
                "groupName": "Í≤∞ÌòºÏãù Ï¥àÎåÄ Í∑∏Î£π",
                "groupType": "WEDDING_GUEST",
                "uniqueCode": "wedding123",
                "createdAt": "2025-01-01T00:00:00Z"
            },
            {
                "id": "2",
                "groupName": "Î∂ÄÎ™®Îãò Í∑∏Î£π",
                "groupType": "PARENTS_GUEST",
                "uniqueCode": "parent456",
                "createdAt": "2025-01-01T00:00:00Z"
            },
            {
                "id": "3",
                "groupName": "ÌöåÏÇ¨ Í∑∏Î£π",
                "groupType": "COMPANY_GUEST",
                "uniqueCode": "company789",
                "createdAt": "2025-01-01T00:00:00Z"
            }
        ]
        """
        
        let response = Response(
            status: .ok,
            headers: HTTPHeaders([("Content-Type", "application/json")]),
            body: .init(string: jsonString)
        )
        return response
    }
}
